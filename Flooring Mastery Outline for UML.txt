Flooring Mastery
Overview
This is an outline for an approach to the Flooring Mastery project
Assumptions
The goal is to create an application that can read and write flooring orders.  This project must demonstrate 
* N-tier/MVC architecture, including the use of a service layer
* Interfaces
* Spring Dependency Injection 
* Unit Testing
Required Steps
Step 0:
Understand the User Stories - 
Business Logic


Step 1: Overview
Determine required packages based on the problem statement


Step 2: Application shell
Create the classes, interfaces, enums


Step 3: Pseudocode
Explains the story for the Flooring App
Step 4: Add cases
Creating the file format
There are three to produce 
The application will use three separate file formats for information.
Orders Files & Format
All orders are stored within an Orders folder. A new order file is created for each sales day. The file name is guaranteed to be unique for that day because the date is part of the file name. When creating new order files the file name should be in this format: Orders_MMDDYYYY.txt.
With this format, the order file for August 21st, 2025 would be named Orders_08212025.txt.
The order file should contain a header row. Data rows will contain the following fields and should be in this order:
1. OrderNumber – Integer
2. CustomerName – String
3. State – String
4. TaxRate – BigDecimal
5. ProductType – String
6. Area – BigDecimal
7. CostPerSquareFoot – BigDecimal
8. LaborCostPerSquareFoot – BigDecimal
9. MaterialCost – BigDecimal
10. LaborCost – BigDecimal
11. Tax – BigDecimal
12. Total – BigDecimal
Here is a sample line from an orders file:
1,Ada Lovelace,CA,25.00,Tile,249.00,3.50,4.15,871.50,1033.35,476.21,2381.06
Orders_06012013.txt is a sample file which is included in the sample download above.
Some of the order fields are calculations:
* MaterialCost = (Area * CostPerSquareFoot)
* LaborCost = (Area * LaborCostPerSquareFoot)
* Tax = (MaterialCost + LaborCost) * (TaxRate/100)
   * Tax rates are stored as whole numbers
* Total = (MaterialCost + LaborCost + Tax)
Tax File & Format
The tax information can be found in Data/Taxes.txt. This file will contain the following fields:
1. StateAbbreviation – String
2. StateName – String
3. TaxRate – BigDecimal
Here is a sample line from the taxes file:
TX,Texas,4.45
Products File & Format
The current product information can be found in Data/Products.txt. It contains the following fields:
1. ProductType – String
2. CostPerSquareFoot – BigDecimal
3. LaborCostPerSquareFoot – BigDecimal
Here is a sample line from the products file:
Tile,3.50,4.15


Step 5: Create Menu
Create a menu with stubbed-out code for each menu choice


Step 6: Implement Functions
Implement purchase item user story
***Repeat step for each User story
User Stories
The UI should start with a menu to prompt the user for what they would like to do:
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * <<Flooring Program>>
   * 1. Display Orders
   * 2. Add an Order
   * 3. Edit an Order
   * 4. Remove an Order
   * 5. Export All Data
   * 6. Quit
   *
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Display Orders
Display orders will ask the user for a date and then display the orders for that date. If no orders exist for that date, it will display an error message and return the user to the main menu.
Add an Order
To add an order will query the user for each piece of order data necessary:
1. Order Date – Must be in the future
2. Customer Name – May not be blank and is limited to characters [a-z][0-9] as well as periods and comma characters. "Acme, Inc." is a valid name.
3. State – Entered states must be checked against the tax file. If the state does not exist in the tax file, we cannot sell there. If the tax file is modified to include the state, it should be allowed without changing the application code.
4. Product Type – Show a list of available products and pricing information to choose from. Again, if a product is added to the file it should show up in the application without a code change.
5. Area – The area must be a positive decimal. Minimum order size is 100 sq ft.
The remaining fields are calculated from the user entry and the tax/product information in the files. Show a summary of the order once the calculations are completed and prompt the user as to whether they want to place the order (Y/N). If yes, the data will be added to in-memory storage. If no, simply return to the main menu.
The system should generate an order number for the user based on the next available order # (so if there are two orders and the max order number is 4, the next order number should be 5).
Edit an Order
Edit will ask the user for a date and order number. If the order exists for that date, it will ask the user for each piece of order data but display the existing data. If the user enters something new, it will replace that data; if the user hits Enter without entering data, it will leave the existing data in place. For example:
Enter customer name (Ada Lovelace):
If the user enters a new name, the name will replace Ada Lovelace. If the user hits enter without entering any data, it will leave the data as-is.
Only certain data is allowed to be changed:
* CustomerName
* State
* ProductType
* Area
If the state, product type, or area are changed, the order will need to be recalculated. Order date may not be changed!
After querying for each editable field display a summary of the new order information and prompt for whether the edit should be saved. If yes, replace the data in the file then return to the main menu. If no, do not save and return to the main menu.
Remove an Order
For removing an order, the system should ask for the date and order number. If it exists, the system should display the order information and prompt the user if they are sure. If yes, it should be removed from the list.
Quit
On quit, exit the application.